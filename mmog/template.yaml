AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Metadata:
  AWS::ServerlessRepo::Application:
    Name: MMOG
    Description: MMOG
    Author: Jonas Aschenbrenner

Globals:
  Function:
    Timeout: 3

Parameters:
  ConnectionsTableName:
    Type: String
    Default: 'mmog-connections'
    Description: (Required) The name of the new DynamoDB table to store connections.
    MinLength: 3
    MaxLength: 255
    AllowedPattern: ^[A-Za-z_\-\.]+$
    ConstraintDescription: 'Required. Can be characters, underscore, dash and dot only. No numbers or other special characters allowed.'

  ObjectsTableName:
    Type: String
    Default: 'mmog-objects'
    Description: (Required) The name of the new DynamoDB table to store objects.
    MinLength: 3
    MaxLength: 255
    AllowedPattern: ^[A-Za-z_\-\.]+$
    ConstraintDescription: 'Required. Can be characters, underscore, dash and dot only. No numbers or other special characters allowed.'

Resources:
  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "connectionId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "connectionId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 15
        WriteCapacityUnits: 15
      TableName: !Ref ConnectionsTableName

  ObjectsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: !Ref ObjectsTableName

  WebSocket:
    Type: AWS::ApiGatewayV2::Api
    DependsOn: Account
    Properties:
      Name: WebSocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.type"
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - MoveRoute
      - DisconnectRoute
      - RequestObjectsRoute
    Properties:
      ApiId: !Ref WebSocket
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Prod
      Description: Prod Stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref WebSocket
  Account:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt CloudWatchRole.Arn
  CloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Action: 'sts:AssumeRole'
          Effect: Allow
          Principal:
            Service: apigateway.amazonaws.com
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs'

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AutoVerifiedAttributes:
        - email

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool

  OnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: build/onConnect/
      Handler: index.handler
      MemorySize: 256
      Runtime: nodejs18.x
      Environment:
        Variables:
          CONNECTIONS_TABLE_NAME: !Ref ConnectionsTableName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionsTableName
        - Statement:
            - Effect: Allow
              Action:
                - 'execute-api:ManageConnections'
              Resource:
                - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocket}/*'
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocket
      RouteKey: $connect
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref Authorizer
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectIntegration
  Authorizer:
    Type: 'AWS::ApiGatewayV2::Authorizer'
    Properties:
      Name: Authorizer
      ApiId: !Ref WebSocket
      AuthorizerType: REQUEST
      AuthorizerUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthorizerFunction.Arn}/invocations'
      IdentitySource:
        - route.request.querystring.idToken
  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocket
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations
  OnConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnConnectFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocket}/*'

  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: build/onDisconnect/
      Handler: index.handler
      MemorySize: 256
      Runtime: nodejs18.x
      Environment:
        Variables:
          CONNECTIONS_TABLE_NAME: !Ref ConnectionsTableName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionsTableName
        - Statement:
           - Effect: Allow
             Action:
               - 'execute-api:ManageConnections'
             Resource:
               - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocket}/*'
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocket
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectIntegration
  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocket
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations
  OnDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnDisconnectFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocket}/*'

  MoveFunction:
    Type: AWS::Serverless::Function
    Properties:
      Tracing: Active
      CodeUri: build/move/
      Handler: index.handler
      MemorySize: 2048
      Runtime: nodejs18.x
      Environment:
        Variables:
          CONNECTIONS_TABLE_NAME: !Ref ConnectionsTableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref ConnectionsTableName
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocket}/*'
  MoveRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocket
      RouteKey: move
      AuthorizationType: NONE
      OperationName: MoveRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref MoveIntegration
  MoveIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocket
      Description: Send Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MoveFunction.Arn}/invocations
  MovePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MoveFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocket}/*'

  RequestObjectsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: build/requestObjects/
      Handler: index.handler
      MemorySize: 256
      Runtime: nodejs18.x
      Environment:
        Variables:
          CONNECTIONS_TABLE_NAME: !Ref ConnectionsTableName
          OBJECTS_TABLE_NAME: !Ref ObjectsTableName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionsTableName
        - DynamoDBCrudPolicy:
            TableName: !Ref ObjectsTableName
        - Statement:
            - Effect: Allow
              Action:
                - 'execute-api:ManageConnections'
              Resource:
                - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocket}/*'
  RequestObjectsRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocket
      RouteKey: request-objects
      AuthorizationType: NONE
      OperationName: RequestObjectsRoute
      Target: !Join
        - '/'
        -
          - 'integrations'
          - !Ref RequestObjectsIntegration
  RequestObjectsIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocket
      Description: Request characters integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RequestObjectsFunction.Arn}/invocations
  RequestObjectsPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref RequestObjectsFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocket}/*'

  InitializeWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: build/initializeWorld/
      Handler: index.handler
      MemorySize: 256
      Runtime: nodejs18.x
      Environment:
        Variables:
          OBJECTS_TABLE_NAME: !Ref ObjectsTableName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ObjectsTableName

  GrowPlantsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: build/growPlants/
      Handler: index.handler
      MemorySize: 256
      Runtime: nodejs18.x
      Events:
        Scheduled:
          Type: ScheduleV2
          Properties:
            ScheduleExpression: cron(0 * * * ? *)
      Environment:
        Variables:
          CONNECTIONS_TABLE_NAME: !Ref ConnectionsTableName
          OBJECTS_TABLE_NAME: !Ref ObjectsTableName
          API_GATEWAY_URL: !Join [ '', [ 'https://', !Ref WebSocket, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/',!Ref 'Stage'] ]
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionsTableName
        - DynamoDBCrudPolicy:
            TableName: !Ref ObjectsTableName
        - Statement:
            - Effect: Allow
              Action:
                - 'execute-api:ManageConnections'
              Resource:
                - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocket}/*'

  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: build/authorizer/
      Handler: index.handler
      MemorySize: 256
      Runtime: nodejs18.x
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          APP_CLIENT_ID: !Ref UserPoolClient
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ObjectsTableName
  AuthorizerPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AuthorizerFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocket}/*'

Outputs:
  ConnectionsTableArn:
    Description: "Connections table ARN"
    Value: !GetAtt ConnectionsTable.Arn

  OnConnectFunctionArn:
    Description: "OnConnect function ARN"
    Value: !GetAtt OnConnectFunction.Arn

  OnDisconnectFunctionArn:
    Description: "OnDisconnect function ARN"
    Value: !GetAtt OnDisconnectFunction.Arn

  MoveFunctionArn:
    Description: "Move function ARN"
    Value: !GetAtt MoveFunction.Arn

  WebSocketURI:
    Description: "The WSS Protocol URI to connect to"
    Value: !Join [ '', [ 'wss://', !Ref WebSocket, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/',!Ref 'Stage'] ]

  UserPoolId:
    Description: "The ID of the user pool"
    Value: !Ref UserPool

  UserPoolClientId:
    Description: "The ID of the user pool client"
    Value: !Ref UserPoolClient
