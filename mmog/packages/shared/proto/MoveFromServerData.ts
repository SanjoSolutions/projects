/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.3
 * source: packages/shared/proto/MoveFromServerData.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf"
export class MoveFromServerData extends pb_1.Message {
  #one_of_decls: number[][] = []
  constructor(
    data?:
      | any[]
      | {
          id?: string
          userID?: string
          isMoving?: boolean
          direction?: number
          x?: number
          y?: number
          i?: number
          isCharacterOfClient?: boolean
          whenMovingHasChanged?: number
        },
  ) {
    super()
    pb_1.Message.initialize(
      this,
      Array.isArray(data) ? data : [],
      0,
      -1,
      [],
      this.#one_of_decls,
    )
    if (!Array.isArray(data) && typeof data == "object") {
      if ("id" in data && data.id != undefined) {
        this.id = data.id
      }
      if ("userID" in data && data.userID != undefined) {
        this.userID = data.userID
      }
      if ("isMoving" in data && data.isMoving != undefined) {
        this.isMoving = data.isMoving
      }
      if ("direction" in data && data.direction != undefined) {
        this.direction = data.direction
      }
      if ("x" in data && data.x != undefined) {
        this.x = data.x
      }
      if ("y" in data && data.y != undefined) {
        this.y = data.y
      }
      if ("i" in data && data.i != undefined) {
        this.i = data.i
      }
      if (
        "isCharacterOfClient" in data &&
        data.isCharacterOfClient != undefined
      ) {
        this.isCharacterOfClient = data.isCharacterOfClient
      }
      if (
        "whenMovingHasChanged" in data &&
        data.whenMovingHasChanged != undefined
      ) {
        this.whenMovingHasChanged = data.whenMovingHasChanged
      }
    }
  }
  get id() {
    return pb_1.Message.getFieldWithDefault(this, 1, "") as string
  }
  set id(value: string) {
    pb_1.Message.setField(this, 1, value)
  }
  get userID() {
    return pb_1.Message.getFieldWithDefault(this, 2, "") as string
  }
  set userID(value: string) {
    pb_1.Message.setField(this, 2, value)
  }
  get isMoving() {
    return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean
  }
  set isMoving(value: boolean) {
    pb_1.Message.setField(this, 3, value)
  }
  get direction() {
    return pb_1.Message.getFieldWithDefault(this, 4, 0) as number
  }
  set direction(value: number) {
    pb_1.Message.setField(this, 4, value)
  }
  get x() {
    return pb_1.Message.getFieldWithDefault(this, 5, 0) as number
  }
  set x(value: number) {
    pb_1.Message.setField(this, 5, value)
  }
  get y() {
    return pb_1.Message.getFieldWithDefault(this, 6, 0) as number
  }
  set y(value: number) {
    pb_1.Message.setField(this, 6, value)
  }
  get i() {
    return pb_1.Message.getFieldWithDefault(this, 7, 0) as number
  }
  set i(value: number) {
    pb_1.Message.setField(this, 7, value)
  }
  get isCharacterOfClient() {
    return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean
  }
  set isCharacterOfClient(value: boolean) {
    pb_1.Message.setField(this, 8, value)
  }
  get whenMovingHasChanged() {
    return pb_1.Message.getFieldWithDefault(this, 9, 0) as number
  }
  set whenMovingHasChanged(value: number) {
    pb_1.Message.setField(this, 9, value)
  }
  static fromObject(data: {
    id?: string
    userID?: string
    isMoving?: boolean
    direction?: number
    x?: number
    y?: number
    i?: number
    isCharacterOfClient?: boolean
    whenMovingHasChanged?: number
  }): MoveFromServerData {
    const message = new MoveFromServerData({})
    if (data.id != null) {
      message.id = data.id
    }
    if (data.userID != null) {
      message.userID = data.userID
    }
    if (data.isMoving != null) {
      message.isMoving = data.isMoving
    }
    if (data.direction != null) {
      message.direction = data.direction
    }
    if (data.x != null) {
      message.x = data.x
    }
    if (data.y != null) {
      message.y = data.y
    }
    if (data.i != null) {
      message.i = data.i
    }
    if (data.isCharacterOfClient != null) {
      message.isCharacterOfClient = data.isCharacterOfClient
    }
    if (data.whenMovingHasChanged != null) {
      message.whenMovingHasChanged = data.whenMovingHasChanged
    }
    return message
  }
  toObject() {
    const data: {
      id?: string
      userID?: string
      isMoving?: boolean
      direction?: number
      x?: number
      y?: number
      i?: number
      isCharacterOfClient?: boolean
      whenMovingHasChanged?: number
    } = {}
    if (this.id != null) {
      data.id = this.id
    }
    if (this.userID != null) {
      data.userID = this.userID
    }
    if (this.isMoving != null) {
      data.isMoving = this.isMoving
    }
    if (this.direction != null) {
      data.direction = this.direction
    }
    if (this.x != null) {
      data.x = this.x
    }
    if (this.y != null) {
      data.y = this.y
    }
    if (this.i != null) {
      data.i = this.i
    }
    if (this.isCharacterOfClient != null) {
      data.isCharacterOfClient = this.isCharacterOfClient
    }
    if (this.whenMovingHasChanged != null) {
      data.whenMovingHasChanged = this.whenMovingHasChanged
    }
    return data
  }
  serialize(): Uint8Array
  serialize(w: pb_1.BinaryWriter): void
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter()
    if (this.id.length) writer.writeString(1, this.id)
    if (this.userID.length) writer.writeString(2, this.userID)
    if (this.isMoving != false) writer.writeBool(3, this.isMoving)
    if (this.direction != 0) writer.writeUint32(4, this.direction)
    if (this.x != 0) writer.writeDouble(5, this.x)
    if (this.y != 0) writer.writeDouble(6, this.y)
    if (this.i != 0) writer.writeUint64(7, this.i)
    if (this.isCharacterOfClient != false)
      writer.writeBool(8, this.isCharacterOfClient)
    if (this.whenMovingHasChanged != 0)
      writer.writeUint64(9, this.whenMovingHasChanged)
    if (!w) return writer.getResultBuffer()
  }
  static deserialize(
    bytes: Uint8Array | pb_1.BinaryReader,
  ): MoveFromServerData {
    const reader =
        bytes instanceof pb_1.BinaryReader
          ? bytes
          : new pb_1.BinaryReader(bytes),
      message = new MoveFromServerData()
    while (reader.nextField()) {
      if (reader.isEndGroup()) break
      switch (reader.getFieldNumber()) {
        case 1:
          message.id = reader.readString()
          break
        case 2:
          message.userID = reader.readString()
          break
        case 3:
          message.isMoving = reader.readBool()
          break
        case 4:
          message.direction = reader.readUint32()
          break
        case 5:
          message.x = reader.readDouble()
          break
        case 6:
          message.y = reader.readDouble()
          break
        case 7:
          message.i = reader.readUint64()
          break
        case 8:
          message.isCharacterOfClient = reader.readBool()
          break
        case 9:
          message.whenMovingHasChanged = reader.readUint64()
          break
        default:
          reader.skipField()
      }
    }
    return message
  }
  serializeBinary(): Uint8Array {
    return this.serialize()
  }
  static deserializeBinary(bytes: Uint8Array): MoveFromServerData {
    return MoveFromServerData.deserialize(bytes)
  }
}
