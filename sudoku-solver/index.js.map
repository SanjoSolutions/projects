{"version":3,"file":"index.js","mappings":"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","sources":["webpack:///./node_modules/@sanjo/array/concat.js","webpack:///./node_modules/@sanjo/range/range.js","webpack:///./node_modules/@sanjo/range/generateTuplesInRange.js","webpack:///./node_modules/@sanjo/set/difference.js","webpack:///./node_modules/@sanjo/array/combinations.js","webpack:///./node_modules/@sanjo/cache/Cache.js","webpack:///./node_modules/@sanjo/array/last.js","webpack:///./node_modules/@sanjo/cache/ObjectCache.js","webpack:///./node_modules/@sanjo/set/union.js","webpack:///./node_modules/@sanjo/set/nOutOf.js","webpack:///./node_modules/@sanjo/set/nOutOfWithDuplicates.js","webpack:///./src/lib.js","webpack:///./node_modules/@sanjo/set/without.js","webpack:///./src/index.js"],"sourcesContent":["export function concat(...arrays) {\n    return [].concat(...arrays);\n}\n//# sourceMappingURL=concat.js.map","export function* range(from, to, interval = 1) {\n    for (let i = from; i <= to; i += interval) {\n        yield i;\n    }\n}\n//# sourceMappingURL=range.js.map","export function generateTuplesInRange(ranges) {\n    let tuples = [[]];\n    for (const range of ranges) {\n        const nextTuples = [];\n        for (const tuple of tuples) {\n            const [from, to, interval] = range;\n            for (let i = from; i <= to; i += interval) {\n                const nextTuple = [...tuple, i];\n                nextTuples.push(nextTuple);\n            }\n        }\n        tuples = nextTuples;\n    }\n    return tuples;\n}\n//# sourceMappingURL=generateTuplesInRange.js.map","export function difference(firstSet, ...otherSets) {\n    const differenceSet = new Set(firstSet);\n    for (const set of otherSets) {\n        for (const element of set) {\n            differenceSet.delete(element);\n        }\n    }\n    return differenceSet;\n}\n//# sourceMappingURL=difference.js.map","import { getIndexSubSequences } from './getIndexSubSequences.js';\nexport function combinations(setOrArray) {\n    const array = [...setOrArray];\n    let indexSubSequences;\n    const length = array.length;\n    if (combinations.indexSubSequencesCache.has(length)) {\n        indexSubSequences = combinations.indexSubSequencesCache.get(length);\n    }\n    else {\n        indexSubSequences = getIndexSubSequences(length);\n        combinations.indexSubSequencesCache.set(length, indexSubSequences);\n    }\n    const subSequences = indexSubSequences.map(indexSubSequence => indexSubSequence.map(index => array[index]));\n    return subSequences;\n}\ncombinations.indexSubSequencesCache = new Map();\n//# sourceMappingURL=combinations.js.map","import { last } from '@sanjo/array';\nexport const FAILED_TO_RETRIEVE_VALUE_ERROR_MESSAGE = 'Failed to retrieve value.';\nexport class Cache {\n    _cache;\n    constructor() {\n        this._cache = new Map();\n    }\n    has(key) {\n        return Boolean(this._retrieveValue(key, () => false));\n    }\n    retrieve(key) {\n        return this._retrieveValue(key, () => {\n            throw new Error(FAILED_TO_RETRIEVE_VALUE_ERROR_MESSAGE);\n        });\n    }\n    set(key, value) {\n        key = this._convertKeyToArray(key);\n        let object = this._cache;\n        for (const keyPart of key.slice(0, key.length - 1)) {\n            if (object instanceof Map && object.has(keyPart)) {\n                object = object.get(keyPart);\n            }\n            else {\n                const newObject = new Map();\n                object.set(keyPart, newObject);\n                object = newObject;\n            }\n        }\n        object.set(last(key), value);\n    }\n    clear() {\n        this._cache = new Map();\n    }\n    _convertKeyToArray(key) {\n        let result;\n        if (Array.isArray(key)) {\n            result = key;\n        }\n        else {\n            result = [key];\n        }\n        return result;\n    }\n    _retrieveValue(key, onMiss) {\n        key = this._convertKeyToArray(key);\n        let object = this._cache;\n        for (const keyPart of key) {\n            if (object instanceof Map && object.has(keyPart)) {\n                object = object.get(keyPart);\n            }\n            else {\n                return onMiss();\n            }\n        }\n        return object;\n    }\n}\n//# sourceMappingURL=Cache.js.map","export function last(array) {\n    const length = array.length;\n    return length >= 1 ? array[length - 1] : null;\n}\n//# sourceMappingURL=last.js.map","import { Cache, FAILED_TO_RETRIEVE_VALUE_ERROR_MESSAGE } from './Cache.js';\nexport class ObjectCache {\n    _cache = new Cache();\n    has(key) {\n        const keyArray = this._convertKeyToArray(key);\n        return this._cache.has(keyArray);\n    }\n    get(key) {\n        const keyArray = this._convertKeyToArray(key);\n        try {\n            return this._cache.retrieve(keyArray);\n        }\n        catch (error) {\n            if (error.message === FAILED_TO_RETRIEVE_VALUE_ERROR_MESSAGE) {\n                return null;\n            }\n            else {\n                throw error;\n            }\n        }\n    }\n    set(key, value) {\n        const keyArray = this._convertKeyToArray(key);\n        this._cache.set(keyArray, value);\n    }\n    clear() {\n        this._cache.clear();\n    }\n    _convertKeyToArray(key) {\n        return this._convertKeyObjectToArray(key);\n    }\n    _convertKeyObjectToArray(key) {\n        const propertyNames = Object.keys(key);\n        propertyNames.sort();\n        return propertyNames.map(propertyName => key[propertyName]);\n    }\n}\n//# sourceMappingURL=ObjectCache.js.map","export function union(...sets) {\n    const unionSet = new Set();\n    for (const set of sets) {\n        for (const element of set) {\n            unionSet.add(element);\n        }\n    }\n    return unionSet;\n}\n//# sourceMappingURL=union.js.map","import { last } from '@sanjo/array';\nimport { nOutOfBase } from './nOutOfBase.js';\nimport { ObjectCache } from '@sanjo/cache';\nexport function nOutOf(n, set) {\n    return nOutOfBase(n, set, nOutOf.indexSubSequencesCache, getNextSubSequenceElementStartValue);\n}\nnOutOf.indexSubSequencesCache = new ObjectCache();\nexport function getNextSubSequenceElementStartValue(subSequence) {\n    return subSequence.length === 0 ? 0 : last(subSequence) + 1;\n}\n//# sourceMappingURL=nOutOf.js.map","import { last } from '@sanjo/array';\nimport { nOutOfBase } from './nOutOfBase.js';\nimport { ObjectCache } from '@sanjo/cache';\nexport function nOutOfWithDuplicates(n, set) {\n    return nOutOfBase(n, set, nOutOfWithDuplicates.indexSubSequencesCache, getNextSubSequenceElementStartValue);\n}\nnOutOfWithDuplicates.indexSubSequencesCache = new ObjectCache();\nexport function getNextSubSequenceElementStartValue(subSequence) {\n    return subSequence.length === 0 ? 0 : last(subSequence);\n}\n//# sourceMappingURL=nOutOfWithDuplicates.js.map","import { concat } from '@sanjo/array'\nimport { generateTuplesInRange, range } from '@sanjo/range'\nimport { difference, union, without } from '@sanjo/set'\n\nexport const sudoku = [\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n]\n\nconst blockWidth = 3\nconst blockHeight = 3\n\nexport function getSudokuFromSudokuInput(sudokuInput) {\n  const cells = sudokuInput.querySelectorAll('input')\n  const sudoku = new Array()\n  for (let rowIndex = 0; rowIndex < 9; rowIndex++) {\n    const row = new Array()\n    sudoku.push(row)\n    for (let columnIndex = 0; columnIndex < 9; columnIndex++) {\n      const value = cells[rowIndex * 9 + columnIndex].value\n      const number = value ? Number(value) : 0\n      row.push(number)\n    }\n  }\n  return sudoku\n}\n\nexport function renderSudokuInputToHTML(sudoku) {\n  const table = document.createElement('table')\n  table.classList.add('sudoku')\n  table.classList.add('sudoku-input')\n  const tbody = document.createElement('tbody')\n  table.appendChild(tbody)\n  for (let rowIndex = 0; rowIndex < sudoku.length; rowIndex++) {\n    const tr = document.createElement('tr')\n    for (let columnIndex = 0; columnIndex < sudoku[rowIndex].length; columnIndex++) {\n      const td = document.createElement('td')\n      const input = document.createElement('input')\n      input.maxLength = 1\n      const value = sudoku[rowIndex][columnIndex]\n      if (value !== 0) {\n        input.value = value\n      }\n      td.appendChild(input)\n      tr.appendChild(td)\n    }\n    tbody.appendChild(tr)\n  }\n  return table\n}\n\nexport function renderSudokuToHTML(sudoku) {\n  const table = document.createElement('table')\n  table.classList.add('sudoku')\n  const tbody = document.createElement('tbody')\n  table.appendChild(tbody)\n  for (let rowIndex = 0; rowIndex < sudoku.length; rowIndex++) {\n    const tr = document.createElement('tr')\n    for (let columnIndex = 0; columnIndex < sudoku[rowIndex].length; columnIndex++) {\n      const td = document.createElement('td')\n      const value = sudoku[rowIndex][columnIndex]\n      if (value === 0) {\n        td.innerHTML = '&nbsp;'\n      } else {\n        td.innerText = value\n      }\n      tr.appendChild(td)\n    }\n    tbody.appendChild(tr)\n  }\n  return table\n}\n\nexport function renderPossibleNumbersToHTML(possibleNumbers) {\n  const table = document.createElement('table')\n  table.classList.add('possible-numbers')\n  const tbody = document.createElement('tbody')\n  table.appendChild(tbody)\n  for (let rowIndex = 0; rowIndex < possibleNumbers.length; rowIndex++) {\n    const tr = document.createElement('tr')\n    for (let columnIndex = 0; columnIndex < possibleNumbers[rowIndex].length; columnIndex++) {\n      const td = document.createElement('td')\n      td.appendChild(renderPossibleNumbersAToHTML(possibleNumbers[rowIndex][columnIndex]))\n      tr.appendChild(td)\n    }\n    tbody.appendChild(tr)\n  }\n  return table\n}\n\nfunction renderPossibleNumbersAToHTML(possibleNumbersA) {\n  const table = document.createElement('table')\n  const tbody = document.createElement('tbody')\n  table.appendChild(tbody)\n  for (let rowIndex = 0; rowIndex < 3; rowIndex++) {\n    const tr = document.createElement('tr')\n    for (let columnIndex = 0; columnIndex < 3; columnIndex++) {\n      const td = document.createElement('td')\n      const number = rowIndex * 3 + columnIndex + 1\n      td.innerHTML = possibleNumbersA && possibleNumbersA.includes(number) ? number : '&nbsp;'\n      tr.appendChild(td)\n    }\n    tbody.appendChild(tr)\n  }\n  return table\n}\n\n// console.log(renderPossibleNumbers(possibleNumbers(sudoku)))\n// console.log(solve(possibleNumbers(sudoku)))\n\nexport function getPossibleNumbers(sudoku) {\n  const possibleNumbers = [\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n  ]\n\n  for (let rowIndex = 0; rowIndex < sudoku.length; rowIndex++) {\n    for (let columnIndex = 0; columnIndex < sudoku[rowIndex].length; columnIndex++) {\n      if (!sudoku[rowIndex][columnIndex]) {\n        possibleNumbers[rowIndex][columnIndex] = [\n          ...difference(\n            new Set([1, 2, 3, 4, 5, 6, 7, 8, 9]),\n            union(\n              union(new Set(getRow(sudoku, rowIndex)), new Set(getColumn(sudoku, columnIndex))),\n              new Set(concat(...getBlock(sudoku, rowIndex, columnIndex))),\n            ),\n          ),\n        ]\n      }\n    }\n  }\n\n  for (let rowIndex = 0; rowIndex < possibleNumbers.length; rowIndex++) {\n    for (let columnIndex1 = 0; columnIndex1 < possibleNumbers[rowIndex].length; columnIndex1++) {\n      for (let columnIndex2 = columnIndex1 + 1; columnIndex2 < possibleNumbers[rowIndex].length; columnIndex2++) {\n        const cell1 = possibleNumbers[rowIndex][columnIndex1]\n        const cell2 = possibleNumbers[rowIndex][columnIndex2]\n        if (cell1 && cell2 && cell1.length === 2 && cell2.length === 2 && union(cell1, cell2).size === 2) {\n          for (let columnIndex3 = 0; columnIndex3 < possibleNumbers[rowIndex].length; columnIndex3++) {\n            const cell3 = possibleNumbers[rowIndex][columnIndex3]\n            if (cell3 && cell3 !== cell1 && cell3 !== cell2) {\n              possibleNumbers[rowIndex][columnIndex3] = Array.from(difference(cell3, new Set(cell1)))\n            }\n          }\n\n          if (isInSameBlock({ rowIndex, columnIndex: columnIndex1 }, { rowIndex, columnIndex: columnIndex2 })) {\n            const blockStartRowIndex = getBlockStartRowIndex(rowIndex)\n            const blockStartColumnIndex = getBlockStartColumnIndex(columnIndex1)\n            for (let blockRowIndex = 0; blockRowIndex < blockHeight; blockRowIndex++) {\n              for (let blockColumnIndex = 0; blockColumnIndex < blockWidth; blockColumnIndex++) {\n                const rowIndex4 = blockStartRowIndex + blockRowIndex\n                const columnIndex4 = blockStartColumnIndex + blockColumnIndex\n                if (\n                  possibleNumbers[rowIndex4][columnIndex4] &&\n                  !(\n                    (rowIndex4 === rowIndex && columnIndex4 === columnIndex1) ||\n                    (rowIndex4 === rowIndex && columnIndex4 === columnIndex2)\n                  )\n                ) {\n                  possibleNumbers[rowIndex4][columnIndex4] = Array.from(\n                    difference(possibleNumbers[rowIndex4][columnIndex4], new Set(cell1)),\n                  )\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  for (let columnIndex = 0; columnIndex < possibleNumbers[0].length; columnIndex++) {\n    for (let rowIndex1 = 0; rowIndex1 < possibleNumbers.length; rowIndex1++) {\n      for (let rowIndex2 = rowIndex1 + 1; rowIndex2 < possibleNumbers.length; rowIndex2++) {\n        const cell1 = possibleNumbers[rowIndex1][columnIndex]\n        const cell2 = possibleNumbers[rowIndex2][columnIndex]\n        if (cell1 && cell2 && cell1.length === 2 && cell2.length === 2 && union(cell1, cell2).size === 2) {\n          for (let rowIndex3 = 0; rowIndex3 < possibleNumbers.length; rowIndex3++) {\n            const cell3 = possibleNumbers[rowIndex3][columnIndex]\n            if (cell3 && cell3 !== cell1 && cell3 !== cell2) {\n              possibleNumbers[rowIndex3][columnIndex] = Array.from(difference(cell3, new Set(cell1)))\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return possibleNumbers\n}\n\nexport function solve(possibleNumbers) {\n  const solutions = [\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n  ]\n\n  for (let rowIndex = 0; rowIndex < possibleNumbers.length; rowIndex++) {\n    for (let columnIndex = 0; columnIndex < possibleNumbers[rowIndex].length; columnIndex++) {\n      if (possibleNumbers[rowIndex][columnIndex]) {\n        const possibleNumbersA = possibleNumbers[rowIndex][columnIndex]\n\n        let solution\n        if (possibleNumbersA.length === 1) {\n          solution = possibleNumbersA[0]\n        } else {\n          const row = new Set(concat(...getRowWithout(possibleNumbers, rowIndex, columnIndex)))\n          const column = new Set(concat(...getColumnWithout(possibleNumbers, rowIndex, columnIndex)))\n          const block = new Set(concat(...concat(...getBlockWithout(possibleNumbers, rowIndex, columnIndex))))\n          solution = possibleNumbersA.find(possibleSolution => {\n            return !row.has(possibleSolution) || !column.has(possibleSolution) || !block.has(possibleSolution)\n          })\n        }\n\n        if (solution) {\n          solutions[rowIndex][columnIndex] = solution\n        }\n      }\n    }\n  }\n\n  return solutions\n}\n\nexport function fillSolutions(sudoku, solutions) {\n  sudoku = [...sudoku]\n  for (let rowIndex = 0; rowIndex < sudoku.length; rowIndex++) {\n    for (let columnIndex = 0; columnIndex < sudoku[rowIndex].length; columnIndex++) {\n      if (solutions[rowIndex][columnIndex]) {\n        sudoku[rowIndex][columnIndex] = solutions[rowIndex][columnIndex]\n      }\n    }\n  }\n  return sudoku\n}\n\nfunction renderPossibleNumbers(possibleNumbers) {\n  return possibleNumbers\n    .map(row => {\n      const aas = row.map(renderPossibleNumbersA)\n      const aa1 = aas\n        .map(aasa => aasa.slice(0, 3))\n        .map(aasaa => aasaa.join(' '))\n        .join(' | ')\n      const aa2 = aas\n        .map(aasa => aasa.slice(3, 6))\n        .map(aasaa => aasaa.join(' '))\n        .join(' | ')\n      const aa3 = aas\n        .map(aasa => aasa.slice(6, 9))\n        .map(aasaa => aasaa.join(' '))\n        .join(' | ')\n      return aa1 + '\\n' + aa2 + '\\n' + aa3\n    })\n    .join('\\n' + '-----'.repeat(9) + '---'.repeat(9 - 1) + '\\n')\n}\n\nfunction renderPossibleNumbersA(possibleNumbersA) {\n  const parts = new Array(9)\n  for (let number = 1; number <= 9; number++) {\n    parts[number - 1] = possibleNumbersA && possibleNumbersA.includes(number) ? String(number) : ' '\n  }\n  return parts\n}\n\nfunction getRowWithout(sudoku, rowIndex, columnIndex) {\n  const row = [...getRow(sudoku, rowIndex)]\n  row.splice(columnIndex, 1)\n  return row\n}\n\nfunction getColumnWithout(sudoku, rowIndex, columnIndex) {\n  const column = [...getColumn(sudoku, columnIndex)]\n  column.splice(rowIndex, 1)\n  return column\n}\n\nfunction getBlockWithout(sudoku, rowIndex, columnIndex) {\n  const block = getBlock(sudoku, rowIndex, columnIndex)\n  block[rowIndex % blockHeight] = [...block[rowIndex % blockHeight]]\n  block[rowIndex % blockHeight].splice(columnIndex % blockWidth, 1, null)\n  return block\n}\n\nfunction getRow(sudoku, rowIndex) {\n  return sudoku[rowIndex]\n}\n\nfunction getColumn(sudoku, columnIndex) {\n  const numberOfRows = sudoku.length\n  const column = new Array(numberOfRows)\n  for (let rowIndex = 0; rowIndex < numberOfRows; rowIndex++) {\n    column[rowIndex] = sudoku[rowIndex][columnIndex]\n  }\n  return column\n}\n\nfunction getBlock(sudoku, rowIndex, columnIndex) {\n  rowIndex = getBlockStartRowIndex(rowIndex)\n  columnIndex = getBlockStartColumnIndex(columnIndex)\n  const block = new Array(blockHeight)\n  for (let blockRowIndex = 0; blockRowIndex < blockHeight; blockRowIndex++) {\n    block[blockRowIndex] = new Array(blockWidth)\n    for (let blockColumnIndex = 0; blockColumnIndex < blockWidth; blockColumnIndex++) {\n      block[blockRowIndex][blockColumnIndex] = sudoku[rowIndex + blockRowIndex][columnIndex + blockColumnIndex]\n    }\n  }\n  return block\n}\n\nfunction getBlockStartRowIndex(rowIndex) {\n  return Math.floor(rowIndex / blockHeight) * blockHeight\n}\n\nfunction getBlockStartColumnIndex(columnIndex) {\n  return Math.floor(columnIndex / blockWidth) * blockWidth\n}\n\nfunction isInSameBlock(cellA, cellB) {\n  const { rowIndex: rowIndex1, columnIndex: columnIndex1 } = cellA\n  const { rowIndex: rowIndex2, columnIndex: columnIndex2 } = cellB\n  return (\n    getBlockStartRowIndex(rowIndex1) === getBlockStartRowIndex(rowIndex2) &&\n    getBlockStartColumnIndex(columnIndex1) === getBlockStartColumnIndex(columnIndex2)\n  )\n}\n\nexport function bruteForce(sudoku) {\n  if (isSolution(sudoku)) {\n    return sudoku\n  }\n\n  const possibleNumbers = getPossibleNumbers(sudoku)\n  if (canSudokuBeSolved(sudoku, possibleNumbers)) {\n    let nextCell\n    if (!sudoku[0][0]) {\n      nextCell = {\n        row: 0,\n        column: 0,\n      }\n    } else {\n      nextCell = determineNextCell(sudoku, 0, 0)\n    }\n    const candidate = copySudoku(sudoku)\n    return solveSub(sudoku, candidate, possibleNumbers, nextCell.row, nextCell.column)\n  }\n\n  return null\n}\n\nfunction solveSub(sudoku, candidate, possibleNumbers, rowIndex, columnIndex) {\n  const remainingPossibleNumbers = without(\n    new Set(possibleNumbers[rowIndex][columnIndex]),\n    getRow(candidate, rowIndex),\n    getColumn(candidate, columnIndex),\n    getBlock(candidate, rowIndex, columnIndex),\n  )\n  if (remainingPossibleNumbers.size >= 1) {\n    const nextCell = determineNextCell(sudoku, rowIndex, columnIndex)\n    for (const number of remainingPossibleNumbers) {\n      candidate[rowIndex][columnIndex] = number\n      if (nextCell) {\n        const solution = solveSub(sudoku, candidate, possibleNumbers, nextCell.row, nextCell.column)\n        if (solution) {\n          return solution\n        }\n      } else {\n        if (isSolution(candidate)) {\n          return candidate\n        }\n      }\n    }\n  }\n\n  candidate[rowIndex][columnIndex] = null\n  return null\n}\n\nexport function determineNextCell(sudoku, row, column) {\n  const startIndex = rowAndColumnToIndex(row, column) + 1\n  const length = 9 * 9\n  for (let index = startIndex; index < length; index++) {\n    const { row, column } = indexToRowAndColumn(index)\n    if (!sudoku[row][column]) {\n      return { row, column }\n    }\n  }\n  return null\n}\n\nfunction rowAndColumnToIndex(row, column) {\n  return row * 9 + column\n}\n\nfunction indexToRowAndColumn(index) {\n  const row = Math.floor(index / 9)\n  const column = index % 9\n  return { row, column }\n}\n\nexport function isSolution(sudoku) {\n  return (\n    getAllRows(sudoku).every(isValidRowFilling) &&\n    getAllColumns(sudoku).every(isValidColumnFilling) &&\n    getAllBlocks(sudoku).every(isValidBlockFilling)\n  )\n}\n\nfunction getAllRows(sudoku) {\n  return [...range(0, 8)].map(index => getRow(sudoku, index))\n}\n\nfunction getAllColumns(sudoku) {\n  return [...range(0, 8)].map(index => getColumn(sudoku, index))\n}\n\nfunction getAllBlocks(sudoku) {\n  return generateTuplesInRange([\n    [0, 8, 3],\n    [0, 8, 3],\n  ]).map(([rowIndex, columnIndex]) => getBlock(sudoku, rowIndex, columnIndex).flat())\n}\n\nfunction isValidRowFilling(row) {\n  return isValidFilling(row)\n}\n\nfunction isValidColumnFilling(column) {\n  return isValidFilling(column)\n}\n\nfunction isValidBlockFilling(block) {\n  return isValidFilling(block)\n}\n\nconst validFilledValues = new Set([1, 2, 3, 4, 5, 6, 7, 8, 9])\n\nfunction isValidFilling(values) {\n  const set = new Set(values)\n  return set.size === 9 && values.every(value => validFilledValues.has(value))\n}\n\nfunction canSudokuBeSolved(sudoku, possibleNumbers) {\n  return generateTuplesInRange([\n    [0, 8, 1],\n    [0, 8, 1],\n  ]).every(([rowIndex, columnIndex]) => {\n    if (sudoku[rowIndex][columnIndex] || possibleNumbers[rowIndex][columnIndex]) {\n      return true\n    } else {\n      return false\n    }\n  })\n}\n\nfunction copySudoku(sudoku) {\n  return sudoku.map(row => Array.from(row))\n}\n","export function without(...sets) {\n    const result = new Set(sets[0]);\n    for (const otherSet of sets.slice(1)) {\n        for (const element of otherSet) {\n            result.delete(element);\n        }\n    }\n    return result;\n}\n//# sourceMappingURL=without.js.map","import {\n  sudoku as initialSudoku,\n  renderSudokuToHTML,\n  getPossibleNumbers,\n  renderPossibleNumbersToHTML,\n  solve,\n  fillSolutions,\n  getSudokuFromSudokuInput,\n  renderSudokuInputToHTML,\n  bruteForce\n} from './lib.js'\n\nlet sudoku\nconst sudokuSavedSerialized = localStorage.getItem('sudoku')\nif (sudokuSavedSerialized) {\n  sudoku = JSON.parse(sudokuSavedSerialized)\n} else {\n  sudoku = [...initialSudoku]\n}\nlet possibleNumbers = [\n  [null, null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null, null],\n]\nlet solutions = [\n  [null, null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null, null],\n]\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  render()\n})\n\nfunction render() {\n  document.body.innerHTML = ''\n\n  const row = document.createElement('div')\n  row.classList.add('row')\n\n  const column1 = document.createElement('div')\n  column1.classList.add('column')\n\n  const column2 = document.createElement('div')\n  column2.classList.add('column')\n\n  const column3 = document.createElement('div')\n  column3.classList.add('column')\n\n  row.append(column1, column2, column3)\n\n  document.body.appendChild(row)\n\n  const sudokuInput = renderSudokuInputToHTML(sudoku)\n  sudokuInput.querySelector('input').autofocus = true\n  column1.appendChild(sudokuInput)\n\n  column1.appendChild(document.createElement('br'))\n\n  const button = document.createElement('button')\n  button.innerText = 'Next'\n  button.style.marginRight = '0.5rem'\n  button.addEventListener('click', () => {\n    sudoku = getSudokuFromSudokuInput(sudokuInput)\n    possibleNumbers = getPossibleNumbers(sudoku)\n    solutions = solve(possibleNumbers)\n    sudoku = fillSolutions(sudoku, solutions)\n    render()\n  })\n  column1.appendChild(button)\n\n  const bruteForceButton = document.createElement('button')\n  bruteForceButton.innerText = 'Brute force'\n  bruteForceButton.addEventListener('click', () => {\n    const solution = bruteForce(sudoku)\n    if (solution) {\n      solutions = solution.map(\n        (row, rowIndex) => row.map((value, columnIndex) => sudoku[rowIndex][columnIndex] ? null : value)\n      )\n      sudoku = solution\n    }\n    render()\n  })\n  column1.appendChild(bruteForceButton)\n\n  column2.appendChild(renderSudokuToHTML(solutions))\n\n  column3.appendChild(renderPossibleNumbersToHTML(possibleNumbers))\n\n  document.addEventListener('keyup', function (event) {\n    if (event.target.tagName === 'INPUT') {\n      localStorage.setItem('sudoku', JSON.stringify(getSudokuFromSudokuInput(sudokuInput)))\n    }\n  })\n}\n"],"names":["concat","arrays","range","from","to","interval","i","generateTuplesInRange","ranges","tuples","nextTuples","tuple","nextTuple","push","difference","firstSet","otherSets","differenceSet","Set","set","element","delete","Map","_cache","constructor","this","has","key","Boolean","_retrieveValue","retrieve","Error","value","_convertKeyToArray","object","keyPart","slice","length","get","newObject","array","last","clear","result","Array","isArray","onMiss","ObjectCache","keyArray","error","message","_convertKeyObjectToArray","propertyNames","Object","keys","sort","map","propertyName","union","sets","unionSet","add","getSudokuFromSudokuInput","sudokuInput","cells","querySelectorAll","sudoku","rowIndex","row","columnIndex","number","Number","renderPossibleNumbersAToHTML","possibleNumbersA","table","document","createElement","tbody","appendChild","tr","td","innerHTML","includes","getPossibleNumbers","possibleNumbers","getRow","getColumn","getBlock","columnIndex1","columnIndex2","cell1","cell2","size","columnIndex3","cell3","isInSameBlock","blockStartRowIndex","getBlockStartRowIndex","blockStartColumnIndex","getBlockStartColumnIndex","blockRowIndex","blockColumnIndex","rowIndex4","columnIndex4","rowIndex1","rowIndex2","rowIndex3","getRowWithout","splice","getColumnWithout","column","getBlockWithout","block","numberOfRows","Math","floor","cellA","cellB","bruteForce","isSolution","every","canSudokuBeSolved","nextCell","determineNextCell","candidate","copySudoku","solveSub","remainingPossibleNumbers","otherSet","without","solution","startIndex","rowAndColumnToIndex","index","indexToRowAndColumn","getAllRows","isValidRowFilling","getAllColumns","isValidColumnFilling","flat","getAllBlocks","isValidBlockFilling","isValidFilling","validFilledValues","values","sudokuSavedSerialized","localStorage","getItem","JSON","parse","solutions","render","body","classList","column1","column2","column3","append","input","maxLength","renderSudokuInputToHTML","querySelector","autofocus","button","innerText","style","marginRight","addEventListener","find","possibleSolution","solve","fillSolutions","bruteForceButton","renderSudokuToHTML","renderPossibleNumbersToHTML","event","target","tagName","setItem","stringify"],"sourceRoot":""}