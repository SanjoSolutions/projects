{"version":3,"sources":["../src/fetchedFlatOffers.js"],"names":["fetchedFlatOffersFileName","defaultFetchedFlatOffersFileName","readFetchedFlatOffers","path","resolve","__dirname","readDefaultFetchedFlatOffers","writeFetchedFlatOffers","fetchedFlatOffers","fs","writeFile","JSON","stringify","encoding","hasFetchedFlatOffer","url","Boolean","registerFlatOfferAsFetched","flatOffer","resetFetchedFlatOffers","defaultFetchedFlatOffers"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;;;;;;AAEA,MAAMA,yBAAyB,GAAG,wBAAlC;AACA,MAAMC,gCAAgC,GAAG,gCAAzC;;AAEA,eAAeC,qBAAf,GAAwC;AACtC,SAAO,MAAM,wBAASC,IAAI,CAACC,OAAL,CAAaC,SAAb,EAAwB,IAAxB,EAA8BL,yBAA9B,CAAT,CAAb;AACD;;AAED,eAAeM,4BAAf,GAA+C;AAC7C,SAAO,MAAM,wBAASH,IAAI,CAACC,OAAL,CAAaC,SAAb,EAAwB,IAAxB,EAA8BJ,gCAA9B,CAAT,CAAb;AACD;;AAED,eAAeM,sBAAf,CAAuCC,iBAAvC,EAA0D;AACxD,QAAMC,aAAGC,SAAH,CACJP,IAAI,CAACC,OAAL,CAAaC,SAAb,EAAwB,IAAxB,EAA8BL,yBAA9B,CADI,EAEJW,IAAI,CAACC,SAAL,CAAeJ,iBAAf,EAAkC,IAAlC,EAAwC,CAAxC,CAFI,EAGJ;AAAEK,IAAAA,QAAQ,EAAE;AAAZ,GAHI,CAAN;AAKD;;AAEM,eAAeC,mBAAf,CAAmCC,GAAnC,EAAwC;AAC7C,QAAMP,iBAAiB,GAAG,MAAMN,qBAAqB,EAArD;AACA,SAAOc,OAAO,CAACR,iBAAiB,CAACO,GAAD,CAAlB,CAAd;AACD;;AAEM,eAAeE,0BAAf,CAA2CF,GAA3C,EAAgDG,SAAhD,EAA2D;AAChE,QAAMV,iBAAiB,GAAG,MAAMN,qBAAqB,EAArD;AACAM,EAAAA,iBAAiB,CAACO,GAAD,CAAjB,GAAyBG,SAAzB;AACA,QAAMX,sBAAsB,CAACC,iBAAD,CAA5B;AACD;;AAEM,eAAeW,sBAAf,GAAwC;AAC7C,QAAMC,wBAAwB,GAAG,MAAMd,4BAA4B,EAAnE;AACA,QAAMC,sBAAsB,CAACa,wBAAD,CAA5B;AACD","sourcesContent":["import { promises as fs } from 'fs'\nimport path from 'path'\nimport { readJSON } from './lib/readJSON.js'\n\nconst fetchedFlatOffersFileName = 'fetchedFlatOffers.json'\nconst defaultFetchedFlatOffersFileName = 'fetchedFlatOffers.default.json'\n\nasync function readFetchedFlatOffers () {\n  return await readJSON(path.resolve(__dirname, '..', fetchedFlatOffersFileName))\n}\n\nasync function readDefaultFetchedFlatOffers () {\n  return await readJSON(path.resolve(__dirname, '..', defaultFetchedFlatOffersFileName))\n}\n\nasync function writeFetchedFlatOffers (fetchedFlatOffers) {\n  await fs.writeFile(\n    path.resolve(__dirname, '..', fetchedFlatOffersFileName),\n    JSON.stringify(fetchedFlatOffers, null, 2),\n    { encoding: 'utf8' }\n  )\n}\n\nexport async function hasFetchedFlatOffer(url) {\n  const fetchedFlatOffers = await readFetchedFlatOffers()\n  return Boolean(fetchedFlatOffers[url])\n}\n\nexport async function registerFlatOfferAsFetched (url, flatOffer) {\n  const fetchedFlatOffers = await readFetchedFlatOffers()\n  fetchedFlatOffers[url] = flatOffer\n  await writeFetchedFlatOffers(fetchedFlatOffers)\n}\n\nexport async function resetFetchedFlatOffers() {\n  const defaultFetchedFlatOffers = await readDefaultFetchedFlatOffers()\n  await writeFetchedFlatOffers(defaultFetchedFlatOffers)\n}\n"],"file":"fetchedFlatOffers.js"}